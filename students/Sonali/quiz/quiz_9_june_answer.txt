**********************************************************************
quiz-1
code:
<a href="https://www.google.com" onClick="console.log('link clicked');">Link One</a>

<a href="https://www.google.com" onClick="console.log('link clicked'); return false">Link Two</a>
answer: link one is open

description: onClick event for link one it will return true value and redirected to given href and for second case
             onClick event will trigger for link two it will return false value and not redirected to the given href.
**********************************************************************
quiz-2
code:
var student = {
name: "john",
getName : function(){console.log("student "+this.name);}
}
var employee = {
  name: "tom",
getName : function(){

console.log("employee "+this.name);}
}
var run = student.getName.bind(employee);
run();

answer: student tom

description: the getName function returns the student tom because var run stores the data which bind to the employee name tom.

************************************************************************

quiz-3
code:
x = 10;
function foo(x){
x=20;
delete x;
return x;
}
console.log(foo(5));

answer: 20

description : in function foo the value of x is 20 so if we delete the x value the output is undefined but if we return the value of x the output should be 20.

*************************************************************************
quiz-4
code:function foo(){
var a;
console.log(a);
a=10;
}
foo();

answer: undefined

description: the value of variable a is not defined  before console.log hence the output should be undefined.
**************************************************************************
quiz-5
code:
function evenodd(n){
return n%2 != 0;
}
myarray = [1,2,3,4,5];
console.log(myarray.filter(evenodd));

answer:[1,3,5]

description: in myarray = [1,2,3,4,5]; we use the return n%2 != 0 then the value  should be return 1,3,5 and The filter() method creates an array filled with all array elements that pass a test (provided as a function).
 ************************************************************************
quiz-6
code: 
var myArray=['80', '90', '100'];
function compare(a,b){
  return a-b;
}
var a = myArray.sort();
var b = myArray.sort(compare);
console.log(a==b);

answer : true

description: we use var myArray=['80', '90', '100']; the sort() function compares two values, it sends the values to the compare function, and sorts the values according to the returned
The purpose of the compare function is to define an alternative sort order. both conditions are maches hence output should be true.


**************************************************************************
quiz-7
code:
myFruits = ['apple','banana','orange'];
const[a,...b] = myFruits;
console.log(a);
console.log(b);

answer: apple
[ 'banana', 'orange' ]

description: in myFruits array  we use console.log(a) the the array value is print apple but the console.log(b) in which ...b statement can print remaining array.
**************************************************************************

quiz-8
code: 
printMe();
function printMe(){
console.log("hello from function.")
var obj = new PrintMeToo();
obj.printMe();
class PrintMeToo{
  printMe(){
console.log("hello from class.")
  }
}

answer:
ReferenceError: Cannot access 'PrintMeToo' before initialization
hello from function.

description: in which PrintMeToo initialization is not a complete so we cannot access this property.
****************************************************************************