





Question 1	:
				// Which link will open "Google" and why?
					
				<a href="https://www.google.com" onClick="console.log('link clicked');"> Link One </a>
  
				<a href="https://www.google.com" onClick="console.log('link clicked'); return false"> Link Two </a> 
				
			
Output		:	Link One
				
Description	:	Link One will open the link as onClick initiates navigation to its URL
				and when on clicking the Link Two due to the return statement returns false.. it prevents the link from opening.






Question 2	:
				var student = {
				  name: 'John',
				  getName: function () {
					console.log('student ' + this.name);
				  },
				};

				var employee = {
				  name: 'Tom',
				  getName: function () {
					console.log('employee ' + this.name);
				  },
				};

				var run = student.getName.bind(employee);
				run();
				
			
Output		:	student Tom
				
Description	:	The bind() method creates a new function that, when called, has its this keyword set to the provided value, 
				with a given sequence of arguments 	preceding any provided when the new function is called.






Question 3	:
				//What is output and why?
				x = 10;
				function foo(x){
					x=20;
					delete x;
					return x;
				}
				console.log(foo(5));
				
			
Output		:	20
				
Description	:	delete operator removes a property from an object and x is a variable; 
				Inside the function foo value of x is 20 and outside the function its 10 






Question 4	:
				function foo() {
				  var a;
				  console.log(a);
				  a = 10;
				}
				foo();

			
Output		:	undefined
				
Description	:	variable a inside the function scope is used before the value is assigned to it that is why the value of a is undefined.






Question 5	:
				// what does filter do ?

				function evenodd(n) {
				  return n % 2 != 0;
				}

				myarray = [1, 2, 3, 4, 5];
				console.log(myarray.filter(evenodd));

			
Output		:	[1, 3, 5]
				
Description	:	The filter() method creates a new array with all elements that pass the test implemented by the provided(evenodd) function.






Question 6	:
				// What is output and why?

				var myArry = ['80', '90', 100];
				function compare(a, b) {
				  return a - b;
				}
				var a = myArry.sort();
				var b = myArry.sort(compare);
				console.log(a == b);

			
Output		:	true
				
Description	:	Optional. A function that defines an alternative sort order. The function should return a negative, zero, or positive value, 
				depending on the arguments, like:
				function(a, b){return a-b}
				When the sort() method compares two values, it sends the values to the compare function, and sorts the values according to the returned (negative, zero, positive) value.






Question 7	:
				// What will be output and why ?

				myFruits = ['apple', 'banana', 'orange'];
				const [a, ...b] = myFruits;
				console.log(a);
				console.log(b);

			
Output		:	apple
				['banana', 'orange']
				
Description	:	Destructuring is done and the first element of the array muFruit is copied to variable a and the rest elements are spread 
				to variable b which is an array because of spread operator.






Question 8	:
				// What is output and why?

				printMe();

				function printMe() {
				  console.log('hello from function');
				}

				var obj = new PrintMeToo();
				obj.printMe;

				class PrintMeToo {
				  printMe() {
					console.log('hello from class');
				  }
				}

			
Output		:	hello from function
				Uncaught ReferenceError: Cannot access 'PrintMeToo' before initialization
				
Description	:	It is called HOISTING - Invoking (calling) a function before it has been defined.
				And classes are not hoisted	and body of the class is always executed in strict mode.
				so, object of the class should be created after initialization of class.

