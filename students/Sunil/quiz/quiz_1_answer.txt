Question 1:
let x = 10;
				let y = x % 4;
				let z = y / 2;
				let c = x * z;
				alert(x);

Output: 10 
Description: redeclaring of a variablce with let is not allowed.

Question 2:
var a = 21;

				var b = function(){
        console.log(a);
				var a = 20;
				};
				
				b();

Output : undefined  
Description: In the block scope, console.log(a), 'a' is used and then a is initialized(var a=20). 
But in javascript declared variable(var a;) is hoisted at top but not initialized variable. So it returns undefined.


Question 3: 
				const magic = 42;
				const theAnswer = magic;
				const everything = new Set([magic,theAnswer]);
				console.log(everything.size);
Output: 1
Description: Only 1 value is stored in set object(set[42,42] which is not allowed) because Set object holds unique values.

Question 4: 
			//Default function declaration
function rectangle(w, h){
  return w * h;
}

//Function Expression
const rectangle = function (w,h){
  return w * h;
}

//Function Arrow Expression
const rectangle = (w, h) => {
  return w * h;
}

//Shorthand Arrow Function
 const rectangle = (w, h) =>  w * h;

Output: SyntaxError: Identifier 'rectangle' has already been declared 
Description: identifier recatangle is already been declared as function 
and it can't be redeclared as const type again.

Question 5:

<a href="https://www.google.com" onClick="console.log('link clicked');">
Link one</a> 
    <a href="https://www.google.com" onClick="console.log('link clicked'); return false">
Link two</a> 

Output: Link one: link clicked in console & opens the url
		Link two: link clicked in console & doesnt open url
 
 Description: First link click opens default browser with mentioned url and second click doesnt open
 the default browser because return false dont allow it to happen.

 Question 6:

var student={
name: "john",
getName: function(){console.log("student "+this.name);}
}

var employee={
name: "tom",
getName: function(){console.log("employee "+this.name);}
}
var run=student.getName.bind(employee);
run();

Output: student tom

Description: bind method is used to borrow method from other object with this sets without copying it. 
So from student object getName is called with borrowing getName from employee object and its this.name data.

Question 7:

x=10;
function foo(x){
  x=20;  
  delete x;
  return x;
}
console.log(foo(5));

Output: 20
Description: global variables in javascript can't be deleted. So in this case x 
is global because its type is mentioned

Question 8:

function foo(){
  var a;
  console.log(a);
  a=10;
}

foo();

output: undefined
Description: Here hoisting of initialized variable a=10 is not possible 
so printing 'a' which is only declared gives undefined output.

Question 9:
function evenodd(n){
 return n%2!=0;
}
myarray=[1,2,3,4,5];
console.log(myarray.filter(evenodd));

output: 1,3,5
Description: filter method is used for an array elements to pass a condition in the function.
Here function returns those value whose remainder is not zero.

Question: 10

var myarray=['80','90',100];

function compare(a,b){
  console.log(a-b);
  return a-b;
}
var a=myarray.sort();
console.log(a);
var b=myarray.sort(compare);
console.log(b);
console.log(a===b);

output: true
Description: didnt get

Question 11:

myfruits=['apple','banana','orange']

const [a,...b]=myfruits;
console.log(a);
console.log(b);

Output: apple
		banana,orange
Description: 'a' is assigned first element from array myfruits and by using 
spread operator for 'b', array elements are individually assigned to 'b'.

Question 12: 

printme();

function printme(){
  console.log("hello from function");
}

var obj=new printmetoo();
obj.printme();

class printmetoo{
  printme(){
    console.log("hello from class");  
  }
}

Output: ReferenceError: Cannot access 'printmetoo' before initialization
		hello from Function
Description: a ReferenceError is thrown at runtime because we are calling a an object method before class definition.
And same object reference is used to call printme() thus giving output.			
